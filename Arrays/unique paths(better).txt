class Solution {
 
 
 
  public int uniquePaths(int n, int m) {
        int[][] dp = new int[n][m];
        // Initialize the dp array with -1 to indicate that the value has not been calculated yet.
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return countPaths(0, 0, n, m, dp);
    }

    public int countPaths(int i, int j, int n, int m, int[][] dp) {
        if (i == n - 1 && j == m - 1) return 1;
        if (i >= n || j >= m) return 0;
        if (dp[i][j] != -1) return dp[i][j];
        else return dp[i][j] = countPaths(i + 1, j, n, m, dp) + countPaths(i, j + 1, n, m, dp);
    }

}



Time Complexity: O(n*m) because at max there can be n*m number of states.

Space Complexity: As we are using extra space for the dummy matrix the space complexity will also be O(n*m).